version: 2.1

commands:
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}
#          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
#          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          key: sccache-cache-stable-{{ arch }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

jobs:
  build:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - run:
          name: rustfmt
          command: |
            cargo fmt --version
            cargo fmt -- --check
      - run:
          name: clippy
          command: |
            cargo clippy --version
            cargo clippy --all-targets --all-features
      - run:
          name: audit
          command: |
            cargo audit --version
            cargo audit
      - save-sccache-cache

  tests_rust:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - run:
          name: rust unit tests --all-features
          command: |
            rustc --version
            cargo --version
            cargo test --lib --all-features
      # No need to save this in cache

  tests_ffi:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      - run:
          name: External dependencies
          command: |
            sudo apt-get install -y clang default-jdk g++ gcc gnustep gnustep-devel gobjc golang libicu-dev libtinfo5 valgrind
      - run:
          name: Cbindgen
          command: |
            cd signer-ffi
            rustup install nightly
            rustup default nightly
            cargo install cbindgen
            cbindgen --config cbindgen.toml --crate filecoin-signer-ffi --lang c --output /tmp/filecoin_signer_ffi.h
            cbindgen --config cbindgen.toml --crate filecoin-signer-ffi --lang c++ --output /tmp/filecoin_signer_ffi_cpp.h
      - run:
          name: Libraries
          command: |
            cd signer-ffi
            cargo build
            cp ../target/debug/libfilecoin_signer_ffi.so /tmp/libfilecoin_signer_ffi.so
            cargo build --features with-jni
            cp ../target/debug/libfilecoin_signer_ffi.so /tmp/libfilecoin_signer_ffi_java.so
      - run: OUT_DIR=/tmp/c ./.circleci/test_c.sh
      - run: OUT_DIR=/tmp/cpp ./.circleci/test_cpp.sh
      - run: OUT_DIR=/tmp/go ./.circleci/test_go.sh
      - run: OUT_DIR=/tmp/java ./.circleci/test_java.sh
      - run: OUT_DIR=/tmp/kotlin ./.circleci/test_kotlin.sh
      - run: OUT_DIR=/tmp/objective-c ./.circleci/test_objective-c.sh
      - run: OUT_DIR=/tmp/swift ./.circleci/test_swift.sh

  tests_wasm:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - checkout
      - run: cargo --version
      - restore-sccache-cache
      - run: sudo apt-get update && sudo apt-get install -y firefox-esr libnss3
      - run: make deps_wasm
      # Disabling Chrome (only Firefox) due to  https://github.com/Zondax/filecoin-rs/issues/68
      - run: make test_wasm_unit
      - run: make test_wasm_node
      #- run: make test_wasm_browser
      # No need to save this in cache

  tests_ledger:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/repo
    environment:
      BASH_ENV: "/opt/circleci/.nvm/nvm.sh"
    steps:
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev curl
      - run:
          name: Install rustup
          command: |
            curl https://sh.rustup.rs -o rustup.sh
            chmod +x rustup.sh
            ./rustup.sh -y
            source $HOME/.cargo/env
            rm rustup.sh
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Install node + yarn
          command: |
            nvm install 13.12.0
            nvm use 13.12.0
            npm install -g yarn
      - run:
          name: Install deps
          command: |
            source $HOME/.cargo/env
            make deps_wasm
      - run: docker pull zondax/builder-zemu
      - run:
          name: Run zemu tests
          command: |
            nvm use 13.12.0
            source $HOME/.cargo/env
            make test_ledger

  tests_service:
    docker:
      - image: zondax/rust-ci:latest
#    environment:
#      LOTUS_SECRET_URL: some_url
#      LOTUS_SECRET_JWT: some_jwt
    steps:
      - checkout
      - restore-sccache-cache

      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev curl
      - run: cargo build
      - run:
          name: patch configuration file
          command: |
            echo [service] >> filecoin-service.toml
            echo address = \"127.0.0.1:3030\" >> filecoin-service.toml
            echo [remote_node] >> filecoin-service.toml
            echo url = \"$LOTUS_SECRET_URL\" >> filecoin-service.toml
            echo jwt = \"$LOTUS_SECRET_JWT\" >> filecoin-service.toml
      - run:
          name: start service
          background: true
          command: |
            cargo run -- start
      - run:
          name: install node dependencies
          command: |
            cd examples/service_jsonrpc
            yarn install
      - run: ls .circleci
      - run:
          name: wait for service to be available
          command: .circleci/wait_for_port.sh 3030
      - run:
          name: run jsonrpc tests
          command: |
            cd examples/service_jsonrpc
            yarn run test:unit
            yarn run test:integration
      # No need to save this in cache

  npm_publish:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - run: sudo apt-get update -y && sudo apt-get install -y libusb-1.0.0 libudev-dev
      - checkout
      - restore-sccache-cache
      - run: make deps_wasm
      - run: make build_wasm
      - run:
          name: Update tag
          command: |
            cd /home/circleci/project/signer-wasm/pkg
            echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > .npmrc
            npm --no-git-tag-version version $CIRCLE_TAG
            npm publish

  rust_publish:
    docker:
      - image: zondax/rust-ci:latest
    steps:
      - checkout
      - restore-sccache-cache
      # TODO: Enable cargo publish

  vuepress_publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: yarn
      - run: yarn build
      - add_ssh_keys:
          fingerprints:
            - "19:d8:07:01:0c:64:b4:8b:d1:44:45:39:87:1f:4d:a0"
      - run:
          name: Install and configure dependencies
          command: |
            yarn global add gh-pages@2.2.0
            git config user.email "ci-build@zondax.ch"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            $(yarn global bin)/gh-pages --message "[skip ci] Updates" --dist docs/.vuepress/dist

no-tags: &no-tags
  filters:
    tags:
      ignore: /.*/

only-release-tags: &only-release-tags
  filters:
    tags:
      only: /^v[0-9]+(\.[0-9]+)*/
    branches:
      ignore: /.*/

workflows:
  version: 2

  default:
    jobs:
      - build:
          <<: *no-tags
      - tests_rust:
          <<: *no-tags
      - tests_ffi:
          <<: *no-tags
      - tests_wasm:
          <<: *no-tags
      - tests_service:
          <<: *no-tags
      - tests_ledger:
          <<: *no-tags

  release:
    jobs:
      - build:
          <<: *only-release-tags
      - tests_rust:
          <<: *only-release-tags
      - tests_ffi:
          <<: *only-release-tags
      - tests_wasm:
          <<: *only-release-tags
      - tests_service:
          <<: *only-release-tags
      - tests_ledger:
          <<: *only-release-tags

#      - rust_publish:
#          <<: *only-release-tags
#          requires:
#            - build
#            - tests_rust
#            - tests_wasm
#            - tests_service

      - npm_publish:
          <<: *only-release-tags
          requires:
            - build
            - tests_rust
            - tests_wasm
            - tests_service
            - tests_ledger

      - vuepress_publish:
          <<: *only-release-tags
          requires:
            - build
            - tests_rust
            - tests_wasm
            - tests_service
            - tests_ledger
